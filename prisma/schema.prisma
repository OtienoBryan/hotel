generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")  // Production Database
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")   // Local/Dev Database with Full Permissions
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id            String    @id @default(cuid())
  name          String?
  tableNo       String?  @unique
  email         String?   @unique
  emailVerified DateTime?
  phoneNumber   String   @unique // Add @unique if you want to query by phoneNumber
  image         String?
  isAdmin       Boolean   @default(false)
  password      String    // Add the password field here
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id     Int    @id @default(autoincrement())
  createdAt DateTime  @default(now())
  title     String
  desc      String
  color     String
  img       String
  slug      String    @unique
  products  Product[]
  subCategories subCategory[]
}
model subCategory {
  id     Int    @id @default(autoincrement())
  createdAt DateTime  @default(now())
  title     String
  desc      String
  color     String
  img       String
  slug      String    @unique
  products  Product[]
  catid     Int
  category  Category @relation(fields: [catid], references: [id])
}

model Product {
  id     Int    @id @default(autoincrement())
  createdAt  DateTime @default(now())
  title      String
  desc       String
  img        String?
  price      Decimal
  isFeatured Boolean  @default(false)
  options    String   // Changed Json[] to String to store JSON array as serialized string
  catid   Int
  category   Category @relation(fields: [catid], references: [id])
  sub_id   Int
  sub_category   subCategory @relation(fields: [sub_id], references: [id])
  orderProducts OrderProduct[]
}

model Order {
  id     Int    @id @default(autoincrement())
  createdAt DateTime @default(now())
  price     Decimal
  status    String
  intent_id String?  @unique
  user      user?    @relation(fields: [userEmail], references: [email])
  userEmail String?  // Make this field optional
  orderProducts OrderProduct[]
  tableNo   Int      @default(1) // Add tableNo with a default value of 1
}
model OrderProduct {
  id     Int    @id @default(autoincrement())
  orderId   Int   // Foreign key to Order
  productId Int   // Foreign key to Product
  quantity  Int      // Quantity of the product ordered
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}